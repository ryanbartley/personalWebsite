<!DOCTYPE html>
<html>
<head>
	<title>Ryan Treese Bartley</title>
	<script src="/js/jquery-1.9.1.js"></script>		
	<link rel="stylesheet" type="text/css" href="/css/bootstrap.css">
	<link rel="stylesheet" type="text/css" href="/css/application.css">

	<script src="/js/bootstrap.js"></script>
	<script src="/js/cinder/Cinder.js"></script>
	<script src="/js/cinder/math/Color.js"></script>
	<script src="/js/cinder/math/OrigDim.js"></script>
	<script src="/js/cinder/math/vec2.js"></script>
	<script src="/js/cinder/math/vec3.js"></script>
	<script src="/js/cinder/math/vec4.js"></script>
	<script src="/js/cinder/math/rect.js"></script>
	<script src="/js/cinder/math/quat.js"></script>
	<script src="/js/cinder/math/ciMath.js"></script>
	<script src="/js/cinder/math/mat4.js"></script>
	<script src="/js/cinder/math/mat3.js"></script>
	<script src="/js/cinder/math/mat2.js"></script>
	<script src="/js/cinder/GeomIo.js"></script>
	<script src="/js/cinder/gl/gl.js"></script>
	<script src="/js/cinder/gl/Context.js"></script>
	<script src="/js/cinder/gl/Vbo.js"></script>
	<script src="/js/cinder/gl/Vao.js"></script>
	<script src="/js/cinder/gl/GlslProg.js"></script>
	<script src="/js/cinder/gl/Texture.js"></script>
	<script src="/js/cinder/gl/GlslProg.js"></script>
	<script src="/js/cinder/gl/Fbo.js"></script>
	<script src="/js/cinder/Camera.js"></script>
	<script src="/js/cinder/CameraPersp.js"></script>
</head>
<body>
	<canvas id="mycanvas"></canvas>

	<div id="page">
		<div id="topmenu">
  			<ul>
    			<li id="about"><a href="#"><span>ME</span></a></li>
    			<li id="projects"><a href="#"><span>PROJECTS</span></a></li>
    			<li id="resume"><a href="#"><span>RESUME</span></a></li>
    			<li id="contact"><a href="#"><span>CONTACT</span></a></li>
    			<li id="llforcc"><a href="http://www.llforcc.com"><span>LLFORCC</span></a></li>
    			<li id="github"><a href="https://github.com/ryanbartley"><span>GITHUB</span></a></li>
    			<li id="websiteName"><a href="#"><span>RYAN TREESE BARTLEY</span></a></li>
  			</ul>
		</div>

		<div id="content">
			<%= yield %>
		</div>
	</div>


	
</body>

<script id="vertShader" type="x-shader/x-vertex">
	attribute vec3 vertexPos;
	uniform mat4 modelViewMatrix;
	uniform mat4 projectionMatrix;

	void main()
	{
		gl_Position = projectionMatrix * modelViewMatrix * vec4(vertexPos, 1.0);

	}
</script>
<script id="fragShader" type="x-shader/x-fragment">
	precision mediump float;
	uniform vec4 Color;

	void main() {
		gl_FragColor = Color;
	}
</script>
<script type="text/javascript">

	Cube = function ( translation, indices, index, color ) {
		this.translationMatrix = translation;
		this.gridNeighborIndices = indices;
		this.index = index;
		this.color = color;

		this.alive = false;
		this.mTimeToGenerateNext = 0;
		this.mTimeToDie = 0;
	};

	Cube.prototype.chooseNext = function() {
		this.chosenNext = true;
		var length = this.gridNeighborIndices.length;
		var pos = Math.round(length * Math.random()) % length;
		return this.gridNeighborIndices[pos];
	};

	Cube.prototype.isAlive = function ( elapsed ) {
		return this.mTimeToDie > elapsed;
	};

	Cube.prototype.activate = function ( elapsed ) {
		this.chosenNext = false;
		this.mTimeToGenerateNext = elapsed + 0.016;
		this.mTimeToDie = elapsed + 2.0;
	};

	Cube.prototype.shouldChooseNext = function( elapsed ) {
		return ! this.chosenNext && this.mTimeToGenerateNext < elapsed;
	};

	function checkPixelRatio () {
		if( window.devicePixelRatio ) {
			return window.devicePixelRatio;
		}
		else {
			return 1;
		}
	}

	function isRetina () {
		return checkPixelRatio === 2 ? true : false;
	}

	MyProgram = function () {
		this.mElementVbo = null;
		this.mVbo = null;
	
		this.cube = null;
		this.mVao = null;
		this.mGlsl = null;
		this.mModelMatrix = null;
		this.mTargetColor = null;
		this.mCurrentColor = null;
		this.mColorHoverStartTime = null;
		this.mUpdateFunc = null;
		this.mCurrentDegree = 0;
	
		this.gl = cinder.getGl();
		this.mCam = null;
		this.cubes = [];
		this.activeCubes = [];
		this.centerCube = null;
	
		return this;
	}

	MyProgram.prototype = {
		constructor: MyProgram,

		setup: function () { 
			this.setupShaders();
			this.setupBuffers();
			this.setupCamera();
			this.setupCubes();
			gl.enableDepthRead();
			gl.enableDepthWrite();
		},

		setupShaders: function () {
			this.mGlsl = GlslProg.create( new GlslProg.Format().vertexId( "vertShader").fragmentId( "fragShader" ) );
		},

		setupCubes: function () {
			var numCubes = 20;
			var offset = (numCubes / 2);
			var i = 0;
			var totalCubes = numCubes * numCubes * numCubes;
			for (var z = 0; z < numCubes; z++) {
				for( var y = 0; y < numCubes; y++ ) {
					for (var x = 0; x < numCubes; x++ ) {

						var position = new Vec3f( ( x - offset ),// * 1.1, 
												 ( y - offset ),// * 1.1, 
												 ( z - offset ) );// * 1.1 );

						var intArray = new Int32Array( [ -1, -1, -1, -1, -1, -1 ] );
						var normalized = i / totalCubes;
						var color = new ColorA( 1.0 - normalized, normalized, 1.0, 1.0);

						if( x !== 0 ) intArray[0] = i - 1;
						if( y !== 0 ) intArray[1] = i - numCubes; 
						if( z !== 0 ) intArray[2] = i - (numCubes * numCubes);
						if( x !== (numCubes - 1) ) intArray[3] = i + 1;
						if( y !== (numCubes - 1) ) intArray[4] = i + numCubes;
						if( z !== (numCubes - 1) ) intArray[5] = i + (numCubes * numCubes);
						
						var cube = new Cube( Matrix44f.createTranslation( position ), intArray, i, color );
						if( x === offset && y === offset && z === offset ) {
							this.centerCube = cube;
						}
						this.cubes.push( cube );
						i++;
					}
				}
			}
		},

		setupBuffers: function () {
			this.mVao = new Vao();
			this.mVao.bind();

			this.cube = new GEOM.Cube( new GEOM.Format() );

			this.mVbo = new Vbo( new Vbo.Format(
				this.gl.ARRAY_BUFFER, 
				null, 
				this.cube.sPositions, 
				this.gl.STATIC_DRAW
			) );

			this.mElementVbo = new Vbo( new Vbo.Format(
				this.gl.ELEMENT_ARRAY_BUFFER,
				null,
				this.cube.sIndices,
				this.gl.STATIC_DRAW
			) );

			this.mCurrentColor = new ColorA( 0.0, 0.0, 0.0, 1.0 );
			this.mTargetColor = new ColorA( 1.0, 0.0, 0.0, 1.0 );
			this.mModelMatrix = Matrix44f.createRotation( new Vec3f( 0, 1, 1 ), .01 );

			this.mVbo.bind();

			var vertLocation = this.mGlsl.getAttribLocation("vertexPos");

			gl.enableVertexAttribArray( vertLocation );
			gl.vertexAttribPointer( vertLocation, 3, this.gl.FLOAT, false, 0, 0 );
		},

		setupCamera: function () {
			this.mCam = new CameraPersp();
			this.mCam.setPerspective(60.0, cinder.getAspectRatio(), .01, 1000);
			this.mCam.lookAt(new Vec3f( 0, 0, 20 ), new Vec3f( 0, 0, 0 ) );
		},

		activateRandomSet: function ( elapsed ) {
			var random = Math.round(this.cubes.length * Math.random());
			var cube = this.cubes[random];
			if( cube.isAlive( elapsed ) )
				return;
			cube.activate( elapsed );
			this.activeCubes.push( cube );
		},

		removeActiveSet: function () {
			this.activeCubes.length = 0;
		},

		transitionColor: function (hover) {
			if( hover ) {
				this.mColorHoverStartTime = cinder.getElapsedSeconds();
				this.mTargetColor.setFromElements( 0.3, 0.3, 0.3, 1.0 );
			}
			else {
				this.mColorHoverStartTime = cinder.getElapsedSeconds();
				this.mTargetColor.setFromElements( 1.0, 0.0, 0.0, 1.0 );
			}
		},

		resize: function () {
			this.mCam.setPerspective( 60.0, cinder.getAspectRatio(), .01, 10000 );
			gl.viewport(0, 0, cinder.getWindowWidth(), cinder.getWindowHeight() );
		},

		update: function () {

			if( ! this.mCurrentColor.equals(this.mTargetColor) ) {
				var timeDifference = cinder.getElapsedSeconds() - this.mColorHoverStartTime;
				if( timeDifference <= .25 ) {
					this.mCurrentColor = this.mCurrentColor.lerp( timeDifference / .25, this.mTargetColor);
				}
				else {
					this.mCurrentColor.setFromColorA(this.mTargetColor);
				}
			}

			if( this.mUpdateFunc != null ) {
				if( ! this.mUpdateFunc() )
					this.mUpdateFunc = null;
			}
			// this.mModelMatrix.multEq( Matrix44f.createRotation( new Vec3f( 0, 1, 0 ), MATH.toRadians(1) ) );

			var elapsed = cinder.getElapsedSeconds();

			if( ! this.activeCubes.length ) {
				var next = this.centerCube.chooseNext();
				var nextCube = this.cubes[next];
				nextCube.activate( elapsed );
				this.activeCubes.push( nextCube );
			}
			else if( Math.random() > .9 ) {
				console.log( "in here" );
				this.activateRandomSet( elapsed );
			}

			for (var i = this.activeCubes.length - 1; i >= 0; i--) {
				if( this.activeCubes[i].isAlive( elapsed ) ) {
					if( this.activeCubes[i].shouldChooseNext( elapsed ) ) {
						var next = this.activeCubes[i].chooseNext();
						if( next !== -1 ) { 
							var nextCube = this.cubes[next];
							nextCube.activate( elapsed );
							this.activeCubes.push( nextCube );
						}
					}
				}
				else {
					this.activeCubes.splice(i, 1);
				}
			}
		},

		draw: function () {
			gl.clearColor(1.0, 1.0, 1.0, 1.0);
			gl.clear(this.gl.COLOR_BUFFER_BIT);

			this.mVao.bind();
			this.mElementVbo.bind();
			this.mGlsl.bind();

			gl.pushMatrices();
			gl.setMatrices(this.mCam);

			// drawing center cube
			gl.pushModelView();

					gl.setModelView( this.mCam.getModelViewMatrix().mult( this.mModelMatrix ) );
					gl.multModelView( this.centerCube.translationMatrix );

					var normalized = 555 / this.cubes.length;
					
					this.mGlsl.uniform("Color", this.centerCube.color );
					this.mGlsl.uniform("modelViewMatrix", gl.getModelView() );
					this.mGlsl.uniform("projectionMatrix", gl.getProjection());
			
					gl.drawElements( this.gl.TRIANGLE_STRIP, this.cube.getNumIndices(), this.gl.UNSIGNED_SHORT, 0 );

			gl.popModelView();

			for( var i = 0; i < this.activeCubes.length; i++ ) { 
				gl.pushModelView();
				gl.setModelView( this.mCam.getModelViewMatrix().mult( this.mModelMatrix ) );
				gl.multModelView( this.activeCubes[i].translationMatrix );
				
				this.mGlsl.uniform("Color", this.activeCubes[i].color );
				this.mGlsl.uniform("modelViewMatrix", gl.getModelView() );
				this.mGlsl.uniform("projectionMatrix", gl.getProjection());
			
				gl.drawElements( this.gl.TRIANGLE_STRIP, this.cube.getNumIndices(), this.gl.UNSIGNED_SHORT, 0 );
				gl.popModelView();
			}
			// var howMany = 0;
			// if( cinder.getElapsedFrames() % 120 === 0 ) {
			// 	howMany = Math.round(Math.random() * 10);
			// }


			// // drawing others
			// for( var i = 0; i < this.cubes.length; i++ ) { 
			// 	if( this.cubes[i].shouldShow ) {
			// 		gl.pushModelView();
			// 		gl.setModelView( this.mCam.getModelViewMatrix().mult( this.mModelMatrix ) );
			// 		gl.multModelView( this.cubes[i].translationMatrix );

			// 		var normalized = i / this.cubes.length;
					
			// 		this.mGlsl.uniform("Color", new ColorA( 1.0 - normalized, normalized, 1.0, 1.0) );
			// 		this.mGlsl.uniform("modelViewMatrix", gl.getModelView() );
			// 		this.mGlsl.uniform("projectionMatrix", gl.getProjection());
			
			// 		gl.drawElements( this.gl.TRIANGLE_STRIP, this.cube.getNumIndices(), this.gl.UNSIGNED_SHORT, 0 );
			// 		gl.popModelView();
			// 		if( howMany > 0 ) {
			// 			howMany--;
			// 			this.cubes[i].shouldShow = false;
			// 		}
			// 	}
			// 	else if( cinder.getElapsedFrames() % 180 === 0 && Math.random() > .99 ) {
			// 		this.cubes[i].shouldShow = true;
			// 	}
			// }

			gl.popMatrices();
		}
	};

	function ajaxRoutine (clickedLink) {
		$.ajax({
  			url: "/ajax/" + clickedLink,
  			cache: false
		})
  		.done(function( html ) {
  			location.hash = clickedLink;
  			$("#content").html(html);
  		});
	}

	function cinderSetupFunc () {
		if( ! isRetina() ) {
			new CINDER( "mycanvas", MyProgram );
		var topMenu = $("#topmenu ul li");
			topMenu.hover( function () {
				cinder.getApp().transitionColor(true);
			}, function () {
				cinder.getApp().transitionColor(false);
			});
		}
		else {
			cinder.mSetup = false;
		}
	}

	$(document).ready(function () {
		var height = $(document).height();
		var width = $(document).width();
		var canvas = document.getElementById("mycanvas");
		canvas.height = height;
		canvas.width = width;
		var topMenu = $("#topmenu ul li");
		topMenu.on('click', function () {
			$('.active').removeClass('active');
			$(this).addClass('active');
			var id = $(this).attr('id');
			ajaxRoutine(id);
		});
		$("#websiteName").addClass('active');
		cinderSetupFunc();
	});
</script>
</html>