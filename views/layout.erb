<!DOCTYPE html>
<html>
<head>
	<title>Ryan Treese Bartley</title>
	<script src="/js/jquery-1.9.1.js"></script>
	<link rel="stylesheet" type="text/css" href="/css/application.css">
	
	<script src="/js/cinder/Cinder/Cinder.js"></script>
	<script src="/js/cinder/Cinder/math/Color.js"></script>
	<script src="/js/cinder/Cinder/math/OrigDim.js"></script>
	<script src="/js/cinder/Cinder/math/vec2.js"></script>
	<script src="/js/cinder/Cinder/math/vec3.js"></script>
	<script src="/js/cinder/Cinder/math/vec4.js"></script>
	<script src="/js/cinder/Cinder/math/rect.js"></script>
	<script src="/js/cinder/Cinder/math/quat.js"></script>
	<script src="/js/cinder/Cinder/math/ciMath.js"></script>
	<script src="/js/cinder/Cinder/math/mat4.js"></script>
	<script src="/js/cinder/Cinder/math/mat3.js"></script>
	<script src="/js/cinder/Cinder/math/mat2.js"></script>
	<script src="/js/cinder/Cinder/GeomIo.js"></script>
	<script src="/js/cinder/Cinder/gl/gl.js"></script>
	<script src="/js/cinder/Cinder/gl/Context.js"></script>
	<script src="/js/cinder/Cinder/gl/Vbo.js"></script>
	<script src="/js/cinder/Cinder/gl/Vao.js"></script>
	<script src="/js/cinder/Cinder/gl/GlslProg.js"></script>
	<script src="/js/cinder/Cinder/gl/Texture.js"></script>
	<script src="/js/cinder/Cinder/gl/GlslProg.js"></script>
	<script src="/js/cinder/Cinder/gl/Fbo.js"></script>
	<script src="/js/cinder/Cinder/Camera.js"></script>
	<script src="/js/cinder/Cinder/CameraPersp.js"></script>
</head>
<body>
	<canvas id="mycanvas"></canvas>

	<div id="page">
		<div id="topmenu">
  			<ul>
    			<li id="about"><a href="#"><span>ME</span></a></li>
    			<li id="projects"><a href="#"><span>PROJECTS</span></a></li>
    			<li id="resume"><a href="#"><span>RESUME</span></a></li>
    			<li id="contact"><a href="#"><span>CONTACT</span></a></li>
    			<li id="llforcc"><a href="http://www.llforcc.com"><span>LLFORCC</span></a></li>
    			<li id="github"><a href="https://github.com/ryanbartley"><span>GITHUB</span></a></li>
    			<li id="websiteName"><a href="#"><span>RYAN TREESE BARTLEY</span></a></li>
  			</ul>
		</div>

		<div id="content">
			<%= yield %>
		</div>
	</div>
	
</body>

<script id="vertShader" type="x-shader/x-vertex">
	attribute vec3 vertexPos;
	uniform mat4 modelViewMatrix;
	uniform mat4 projectionMatrix;

	void main()
	{
		gl_Position = projectionMatrix * modelViewMatrix * vec4(vertexPos, 1.0);

	}
</script>
<script id="fragShader" type="x-shader/x-fragment">
	precision mediump float;
	uniform vec4 Color;

	void main() {
		gl_FragColor = Color;
	}
</script>
<script type="text/javascript">

	function checkPixelRatio () {
		if( window.devicePixelRatio ) {
			return window.devicePixelRatio;
		}
		else {
			return 1;
		}
	}

	function isRetina () {
		return checkPixelRatio === 2 ? true : false;
	}

	MyProgram = function () {
		this.mElementVbo = null;
		this.mVbo = null;
	
		this.cube = null;
		this.mVao = null;
		this.mGlsl = null;
		this.mModelMatrix = null;
		this.mTargetColor = null;
		this.mCurrentColor = null;
		this.mColorHoverStartTime = null;
		this.mUpdateFunc = null;
		this.mCurrentDegree = 0;
	
		this.gl = cinder.getGl();
		this.mCam = null;
	
		return this;
	}

	MyProgram.prototype = {
		constructor: MyProgram,

		setup: function () { 
			this.setupShaders();
			this.setupBuffers();
			this.setupCamera();
		},

		setupShaders: function () {
			this.mGlsl = GlslProg.create( new GlslProg.Format().vertexId( "vertShader").fragmentId( "fragShader" ) );
		},

		setupBuffers: function () {
			this.mVao = new Vao();
			this.mVao.bind();

			this.cube = new GEOM.Cube( new GEOM.Format() );

			this.mVbo = new Vbo( new Vbo.Format(
				this.gl.ARRAY_BUFFER, 
				null, 
				this.cube.sPositions, 
				this.gl.STATIC_DRAW
			) );

			this.mElementVbo = new Vbo( new Vbo.Format(
				this.gl.ELEMENT_ARRAY_BUFFER,
				null,
				this.cube.sIndices,
				this.gl.STATIC_DRAW
			) );

			this.mCurrentColor = new ColorA( 0.0, 0.0, 0.0, 1.0 );
			this.mTargetColor = new ColorA( 1.0, 0.0, 0.0, 1.0 );
			this.mModelMatrix = Matrix44f.createRotation( new Vec3f( 0, 1, 1 ), .01 );

			this.mVbo.bind();

			var vertLocation = this.mGlsl.getAttribLocation("vertexPos");

			gl.enableVertexAttribArray( vertLocation );
			gl.vertexAttribPointer( vertLocation, 3, this.gl.FLOAT, false, 0, 0 );
		},

		setupCamera: function () {
			this.mCam = new CameraPersp();
			this.mCam.setPerspective(60.0, cinder.getAspectRatio(), .01, 1000);
			this.mCam.lookAt(new Vec3f( 0, 0, 5 ), new Vec3f( 0, 0, 0 ) );
		},

		setUpdateFunc: function (updateFunc) {
			this.mUpdateFunc = updateFunc;
		},

		transitionColor: function (hover) {
			if( hover ) {
				this.mColorHoverStartTime = cinder.getElapsedSeconds();
				this.mTargetColor.setFromElements( 0.3, 0.3, 0.3, 1.0 );
			}
			else {
				this.mColorHoverStartTime = cinder.getElapsedSeconds();
				this.mTargetColor.setFromElements( 1.0, 0.0, 0.0, 1.0 );
			}
		},

		resize: function () {
			this.mCam.setPerspective(60.0, cinder.getAspectRatio(), .01, 1000 );
			gl.viewport(0, 0, cinder.getWindowWidth(), cinder.getWindowHeight() );
		},

		update: function () {


			if( ! this.mCurrentColor.equals(this.mTargetColor) ) {
				var timeDifference = cinder.getElapsedSeconds() - this.mColorHoverStartTime;
				if( timeDifference <= .25 ) {
					this.mCurrentColor = this.mCurrentColor.lerp( timeDifference / .25, this.mTargetColor);
				}
				else {
					this.mCurrentColor.setFromColorA(this.mTargetColor);
				}
			}

			if( this.mUpdateFunc != null ) {
				this.mUpdateFunc();
			}
			++this.mCurrentDegree;
			this.mModelMatrix.multEq( Matrix44f.createRotation( new Vec3f( 1, 0, 1 ), MATH.toRadians(1) ) );

		},

		draw: function () {
			gl.clearColor(0.0, 0.0, 0.0, 1.0);
			gl.clear(this.gl.COLOR_BUFFER_BIT);

			this.mVao.bind();
			this.mElementVbo.bind();
			this.mGlsl.bind();

			gl.pushMatrices();
			gl.setMatrices(this.mCam);
			gl.pushModelView();
				gl.setModelView( this.mCam.getModelViewMatrix().mult( this.mModelMatrix ) );

					this.mGlsl.uniform("Color", this.mCurrentColor );
					this.mGlsl.uniform("modelViewMatrix", gl.getModelView() );
					this.mGlsl.uniform("projectionMatrix", gl.getProjection());
			
					gl.drawElements( this.gl.TRIANGLE_STRIP, this.cube.getNumIndices(), this.gl.UNSIGNED_SHORT, 0 );

			gl.popModelView();
			gl.popMatrices();
		}
	};

	function ajaxRoutine (clickedLink) {
		onClosePage();
		$.ajax({
  			url: "/ajax/" + clickedLink,
  			cache: false
		})
  		.done(function( html ) {
  			location.hash = clickedLink;
  			$("#content").html(html);
  			onOpenPage();
  		});
	}

	function cinderSetupFunc () {
		if( ! isRetina() ) {
			new CINDER( "mycanvas", MyProgram );
			topMenu.hover( function () {
				cinder.getApp().transitionColor(true);
			}, function () {
				cinder.getApp().transitionColor(false);
			});
		}
		else {
			cinder.mSetup = false;
		}
	}

	$(document).ready(function () {
		var height = $(document).height();
		var width = $(document).width();
		var canvas = document.getElementById("mycanvas");
		canvas.height = height;
		canvas.width = width;
		var topMenu = $("#topmenu ul li");
		topMenu.on('click', function () {
			$('.active').removeClass('active');
			$(this).addClass('active');
			var id = $(this).attr('id');
			ajaxRoutine(id);
		});
		$("#websiteName").addClass('active');
		cinderSetupFunc();
		onOpenPage();
	});
</script>
</html>